import AsyncStorage from '@react-native-async-storage/async-storage';
import { LocalStorageService } from './localStorageService';
import consentService from './consentService';
import * as FileSystem from 'expo-file-system/legacy';

class DataDeleteService {
  /**
   * Supprime TOUTES les donn√©es LOCALES de l'utilisateur
   * ‚ö†Ô∏è ACTION IRR√âVERSIBLE
   *
   * Note : Cette fonction supprime uniquement les donn√©es sur l'appareil.
   * Le code d'activation dans Firebase n'est PAS supprim√© (seul l'admin peut le faire).
   * L'utilisateur devra acheter un nouveau code d'activation pour r√©utiliser l'app.
   */
  async deleteAllUserData(): Promise<{ success: boolean; message: string }> {
    try {
      console.log('üóëÔ∏è D√©but de la suppression totale des donn√©es...');

      // 1. Supprimer toutes les factures (localement + PDFs)
      console.log('üìÑ Suppression des factures...');
      await LocalStorageService.clearAll();

      // 2. Supprimer tous les clients
      console.log('üë• Suppression des clients...');
      await AsyncStorage.removeItem('clients');

      // 3. Supprimer les param√®tres
      console.log('‚öôÔ∏è Suppression des param√®tres...');
      await AsyncStorage.removeItem('owner_settings');

      // 4. Supprimer le consentement RGPD
      console.log('üìã Suppression du consentement...');
      await consentService.revokeConsent();

      // 5. Supprimer le compteur de factures
      console.log('üî¢ Suppression du compteur...');
      await AsyncStorage.removeItem('@fakt_last_invoice_number');
      await AsyncStorage.removeItem('last_invoice_number');

      // 6. Supprimer les donn√©es d'activation locale
      console.log('üîë Suppression de l\'activation...');
      // Cl√©s utilis√©es par activationService
      await AsyncStorage.removeItem('app_activation_code'); // ‚úÖ CL√â PRINCIPALE !
      await AsyncStorage.removeItem('app_activation_data'); // ‚úÖ Donn√©es d'activation
      await AsyncStorage.removeItem('device_id'); // ‚úÖ Device ID
      // Anciennes cl√©s (peut-√™tre obsol√®tes mais on les supprime quand m√™me)
      await AsyncStorage.removeItem('@fakt_activation_status');
      await AsyncStorage.removeItem('@fakt_activation_code');
      await AsyncStorage.removeItem('@fakt_activation_name');
      await AsyncStorage.removeItem('@fakt_activation_email');
      await AsyncStorage.removeItem('@fakt_activation_date');
      await AsyncStorage.removeItem('@fakt_device_id');

      // 7. Supprimer le dossier des PDFs si existant
      console.log('üìÅ Suppression du dossier PDFs...');
      try {
        const pdfDir = `${FileSystem.documentDirectory}invoices/`;
        const dirInfo = await FileSystem.getInfoAsync(pdfDir);
        if (dirInfo.exists) {
          await FileSystem.deleteAsync(pdfDir, { idempotent: true });
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erreur suppression dossier PDF (ignor√©e):', error);
      }

      // 8. Supprimer les donn√©es Firebase si connect√©
      console.log('‚òÅÔ∏è Suppression des donn√©es Firebase...');
      try {
        // Les donn√©es Firebase seront supprim√©es automatiquement
        // par la Cloud Function quand le code d'activation sera supprim√©
        // Ici on supprime juste les r√©f√©rences locales
        await AsyncStorage.removeItem('firebase_user_id');
      } catch (error) {
        console.log('‚ö†Ô∏è Erreur suppression Firebase (ignor√©e):', error);
      }

      // 9. Supprimer tous les autres caches possibles
      console.log('üßπ Nettoyage final...');
      await AsyncStorage.removeItem('invoices');
      await AsyncStorage.removeItem('@fakt_subscription_type');
      await AsyncStorage.removeItem('@fakt_subscription_expires');

      console.log('‚úÖ Toutes les donn√©es ont √©t√© supprim√©es');

      return {
        success: true,
        message: 'Toutes vos donn√©es ont √©t√© supprim√©es d√©finitivement'
      };

    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression:', error);
      return {
        success: false,
        message: `Erreur lors de la suppression: ${error}`
      };
    }
  }

  /**
   * Obtient un r√©sum√© des donn√©es qui seront supprim√©es
   */
  async getDeleteSummary(): Promise<{
    invoicesCount: number;
    clientsCount: number;
  }> {
    try {
      const invoices = await LocalStorageService.getInvoices();

      let clientsCount = 0;
      try {
        const clientsJson = await AsyncStorage.getItem('clients');
        if (clientsJson) {
          const clients = JSON.parse(clientsJson);
          clientsCount = clients.length;
        }
      } catch (error) {
        console.log('Aucun client trouv√©');
      }

      return {
        invoicesCount: invoices.length,
        clientsCount,
      };
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration r√©sum√©:', error);
      return {
        invoicesCount: 0,
        clientsCount: 0,
      };
    }
  }
}

export default new DataDeleteService();
