const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

/**
 * Cloud Function d√©clench√©e quand un code d'activation est supprim√©
 * Supprime automatiquement toutes les donn√©es de l'utilisateur associ√©
 */
exports.onActivationCodeDeleted = functions.firestore
  .document('activationCodes/{codeId}')
  .onDelete(async (snap, context) => {
    const deletedCode = snap.data();
    const codeId = context.params.codeId;

    console.log(`üóëÔ∏è Code d'activation supprim√©: ${codeId}`);

    // V√©rifier si le code √©tait utilis√© et avait un deviceId associ√©
    if (!deletedCode.deviceId) {
      console.log('‚ö†Ô∏è Aucun deviceId associ√©, rien √† supprimer');
      return null;
    }

    const deviceId = deletedCode.deviceId;
    console.log(`üì± Device ID trouv√©: ${deviceId}`);

    try {
      const db = admin.firestore();
      const batch = db.batch();

      // 1. Supprimer le document utilisateur principal
      const userRef = db.collection('users').doc(deviceId);
      batch.delete(userRef);
      console.log(`üóëÔ∏è Document utilisateur marqu√© pour suppression: ${deviceId}`);

      // 2. Supprimer tous les param√®tres (settings)
      const settingsSnapshot = await db
        .collection('users')
        .doc(deviceId)
        .collection('settings')
        .get();

      settingsSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      console.log(`üóëÔ∏è ${settingsSnapshot.size} param√®tres marqu√©s pour suppression`);

      // 3. Supprimer tous les clients
      const clientsSnapshot = await db
        .collection('users')
        .doc(deviceId)
        .collection('clients')
        .get();

      clientsSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      console.log(`üóëÔ∏è ${clientsSnapshot.size} clients marqu√©s pour suppression`);

      // 4. Supprimer toutes les factures
      const invoicesSnapshot = await db
        .collection('users')
        .doc(deviceId)
        .collection('invoices')
        .get();

      invoicesSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      console.log(`üóëÔ∏è ${invoicesSnapshot.size} factures marqu√©es pour suppression`);

      // 5. Supprimer tous les compteurs
      const countersSnapshot = await db
        .collection('users')
        .doc(deviceId)
        .collection('counters')
        .get();

      countersSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      console.log(`üóëÔ∏è ${countersSnapshot.size} compteurs marqu√©s pour suppression`);

      // Ex√©cuter toutes les suppressions en une seule transaction
      await batch.commit();

      console.log(`‚úÖ Toutes les donn√©es de l'utilisateur ${deviceId} ont √©t√© supprim√©es avec succ√®s`);
      console.log(`üìä R√©sum√©: ${settingsSnapshot.size} settings, ${clientsSnapshot.size} clients, ${invoicesSnapshot.size} factures, ${countersSnapshot.size} compteurs`);

      return {
        success: true,
        deletedCode: codeId,
        deviceId: deviceId,
        deletedData: {
          settings: settingsSnapshot.size,
          clients: clientsSnapshot.size,
          invoices: invoicesSnapshot.size,
          counters: countersSnapshot.size
        }
      };

    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression des donn√©es utilisateur:', error);
      throw new functions.https.HttpsError('internal', `Erreur de suppression: ${error.message}`);
    }
  });

/**
 * Cloud Function HTTP pour supprimer manuellement un utilisateur
 * Usage: POST avec { "deviceId": "xxx" } ou { "codeId": "FAKT-XXXX-XXXX-XXXX" }
 */
exports.deleteUserData = functions.https.onCall(async (data, context) => {
  // V√©rification de l'authentification (optionnel - √† activer si besoin)
  // if (!context.auth) {
  //   throw new functions.https.HttpsError('unauthenticated', 'Vous devez √™tre authentifi√©');
  // }

  const { deviceId, codeId } = data;

  if (!deviceId && !codeId) {
    throw new functions.https.HttpsError('invalid-argument', 'deviceId ou codeId requis');
  }

  try {
    const db = admin.firestore();
    let targetDeviceId = deviceId;

    // Si codeId fourni, chercher le deviceId associ√©
    if (!targetDeviceId && codeId) {
      const codeDoc = await db.collection('activationCodes').doc(codeId).get();
      if (!codeDoc.exists) {
        throw new functions.https.HttpsError('not-found', 'Code d\'activation introuvable');
      }
      targetDeviceId = codeDoc.data().deviceId;
    }

    if (!targetDeviceId) {
      throw new functions.https.HttpsError('not-found', 'Aucun utilisateur trouv√©');
    }

    console.log(`üóëÔ∏è Suppression manuelle des donn√©es pour deviceId: ${targetDeviceId}`);

    const batch = db.batch();

    // Supprimer toutes les collections
    const collections = ['settings', 'clients', 'invoices', 'counters'];
    let totalDeleted = 0;

    for (const collectionName of collections) {
      const snapshot = await db
        .collection('users')
        .doc(targetDeviceId)
        .collection(collectionName)
        .get();

      snapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      totalDeleted += snapshot.size;
    }

    // Supprimer le document utilisateur
    const userRef = db.collection('users').doc(targetDeviceId);
    batch.delete(userRef);

    await batch.commit();

    console.log(`‚úÖ ${totalDeleted} documents supprim√©s pour l'utilisateur ${targetDeviceId}`);

    return {
      success: true,
      deviceId: targetDeviceId,
      deletedDocuments: totalDeleted
    };

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    throw new functions.https.HttpsError('internal', error.message);
  }
});
